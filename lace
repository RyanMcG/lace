#!/bin/bash
# The MIT License (MIT)

# Copyright (c) 2015 Ryan V McGowan

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Helper method for invoking editor on given arguments with the correct stdin
# and stdout.
edit () {
	# close stdin and reopen to tty
	exec <&-
	exec < /dev/tty

	# Save stdout to fd 3, close it, then reopen to tty
	exec 3>&1
	exec 1>&-
	exec > /dev/tty

	$EDITOR "$@" 3>&-
	RET=$?

	# Redirect old stdout back to 1
	exec 1>&3

	if [ $RET -ne 0 ] ; then
		# if stdout is a terminal then print an error message
		if [ -t 1 ] ; then
			echo "$EDITOR exited non-zero" 2>&1
		fi
		rm $TEMPFILE
		exit $RET
	fi
}

# Quote arguments if more than one is given.
CMD="$@"
if [ "$#" -gt 1 ]; then
	CMD="'$CMD'"
fi

INPUT=$(cat)

declare -a LINES
BEFORE_COUNT=0

while read -r line ; do
	LINES[BEFORE_COUNT]="$line"
	BEFORE_COUNT=$((BEFORE_COUNT+1))
done <<< "$INPUT"

TEMPFILE=$(mktemp /tmp/lace.XXXXXXXX)

while read -r line ; do
	args=($CMD $line)
	echo ${args[@]}
done <<< "$INPUT" > $TEMPFILE

edit $TEMPFILE

AFTER_COUNT=$(wc -l < $TEMPFILE)

if [ $BEFORE_COUNT -ne $AFTER_COUNT ] ; then
	if [ -t 1 ] ; then
		echo -n "Started with $BEFORE_COUNT line"
		if [ "$BEFORE_COUNT" -ne 1 ] ; then
			echo -n "s"
		fi
		echo " but ended with $AFTER_COUNT."
	fi
	rm $TEMPFILE
	exit 1
fi

LINE_INDEX=0
while read -a tokens ; do
	echo -n "${tokens[0]} ${LINES[LINE_INDEX]}"
	unset tokens[0]
	REMAINDER="${tokens[@]}"
	if [ ${#REMAINDER} -gt 0 ] ; then
		echo -n " $REMAINDER"
	fi
	echo
	LINE_INDEX=$((LINE_INDEX+1))
done < $TEMPFILE

rm $TEMPFILE
